   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.startup,"ax",@progbits
  12               	.global	main
  14               	main:
  15               	.LFB18:
  16               		.file 1 "Src/core/main.c"
   1:Src/core/main.c **** //***************************************************************************
   2:Src/core/main.c **** // Copyright (C) 2017 Laboratório de Sistemas e Tecnologia Subaquática      *
   3:Src/core/main.c **** // Departamento de Engenharia Electrotécnica e de Computadores              *
   4:Src/core/main.c **** // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
   5:Src/core/main.c **** //***************************************************************************
   6:Src/core/main.c **** // Author: João Costa                                                       *
   7:Src/core/main.c **** //***************************************************************************
   8:Src/core/main.c **** 
   9:Src/core/main.c **** #include "../../Inc/core/main.h"
  10:Src/core/main.c **** 
  11:Src/core/main.c **** /*! Success variable, used to test driver. */
  12:Src/core/main.c **** extern int end_stop1;
  13:Src/core/main.c **** 
  14:Src/core/main.c **** int main(void)
  15:Src/core/main.c **** {
  17               		.loc 1 15 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  16:Src/core/main.c ****   cli();
  23               		.loc 1 16 3 view .LVU1
  24               	/* #APP */
  25               	 ;  16 "Src/core/main.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  17:Src/core/main.c ****   board_init();
  28               		.loc 1 17 3 view .LVU2
  29               	/* #NOAPP */
  30               	.LBB18:
  31               	.LBI18:
  32               		.file 2 "Src/core/../../Inc/core/../../Inc/core/board_init.h"
   1:Src/core/../../Inc/core/../../Inc/core/board_init.h **** //***************************************************************************
   2:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Copyright (C) 2017 Laboratório de Sistemas e Tecnologia Subaquática      *
   3:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Departamento de Engenharia Electrotécnica e de Computadores              *
   4:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
   5:Src/core/../../Inc/core/../../Inc/core/board_init.h **** //***************************************************************************
   6:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Author: Pedro Gonçalves                                                  *
   7:Src/core/../../Inc/core/../../Inc/core/board_init.h **** //***************************************************************************
   8:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
   9:Src/core/../../Inc/core/../../Inc/core/board_init.h **** /// ISO C 99 headers.
  10:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <stddef.h>
  11:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <inttypes.h>
  12:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <stdio.h>
  13:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <stdlib.h>
  14:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <string.h>
  15:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  16:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Local Headers
  17:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../../config.h"
  18:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../driver/io.h"
  19:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../../TC_driver/TC_driver.h"
  20:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  21:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // AVR headers.
  22:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <avr/io.h>
  23:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  24:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #ifndef BOARD_INIT_H_INCLUDED_
  25:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #define BOARD_INIT_H_INCLUDED_
  26:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  27:Src/core/../../Inc/core/../../Inc/core/board_init.h **** static inline void
  28:Src/core/../../Inc/core/../../Inc/core/board_init.h **** board_init(void)
  33               		.loc 2 28 1 view .LVU3
  34               	.LBB19:
  29:Src/core/../../Inc/core/../../Inc/core/board_init.h **** {
  30:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  31:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // System Clock.                                                        *
  32:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  33:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // ENABLE INTERNAL 32MHZ OSCILLATOR
  34:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  35:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   CCP = CCP_IOREG_gc;
  35               		.loc 2 35 3 view .LVU4
  36               		.loc 2 35 7 is_stmt 0 view .LVU5
  37 0002 88ED      		ldi r24,lo8(-40)
  38 0004 84BF      		out __CCP__,r24
  36:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  37:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   OSC.CTRL = OSC_RC32MEN_bm;
  39               		.loc 2 37 3 is_stmt 1 view .LVU6
  40               		.loc 2 37 12 is_stmt 0 view .LVU7
  41 0006 82E0      		ldi r24,lo8(2)
  42 0008 8093 5000 		sts 80,r24
  38:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  39:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   while (!(OSC.STATUS & OSC_RC32MRDY_bm))
  43               		.loc 2 39 3 is_stmt 1 view .LVU8
  44               	.L2:
  40:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  45               		.loc 2 40 5 view .LVU9
  39:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  46               		.loc 2 39 9 view .LVU10
  39:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  47               		.loc 2 39 15 is_stmt 0 view .LVU11
  48 000c 8091 5100 		lds r24,81
  39:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  49               		.loc 2 39 9 view .LVU12
  50 0010 81FF      		sbrs r24,1
  51 0012 00C0      		rjmp .L2
  41:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  42:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   CCP = CCP_IOREG_gc;
  52               		.loc 2 42 3 is_stmt 1 view .LVU13
  53               		.loc 2 42 7 is_stmt 0 view .LVU14
  54 0014 88ED      		ldi r24,lo8(-40)
  55 0016 84BF      		out __CCP__,r24
  43:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  44:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
  56               		.loc 2 44 3 is_stmt 1 view .LVU15
  57               		.loc 2 44 12 is_stmt 0 view .LVU16
  58 0018 81E0      		ldi r24,lo8(1)
  59 001a 8093 4000 		sts 64,r24
  45:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  46:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  47:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //* GPIO.                                                               *
  48:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  49:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  50:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // Setup pins as IN/OUTputs
  51:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_OUT(LED, false);
  60               		.loc 2 51 3 is_stmt 1 view .LVU17
  61 001e 40E0      		ldi r20,0
  62 0020 60E0      		ldi r22,0
  63 0022 80E4      		ldi r24,lo8(64)
  64 0024 96E0      		ldi r25,lo8(6)
  65 0026 0E94 0000 		call gpio_cfg_out_np
  66               	.LVL0:
  52:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_OPC(LED, GPIO_OPC_PULLDOWN);
  67               		.loc 2 52 3 view .LVU18
  68 002a 40E1      		ldi r20,lo8(16)
  69 002c 60E0      		ldi r22,0
  70 002e 80E4      		ldi r24,lo8(64)
  71 0030 96E0      		ldi r25,lo8(6)
  72 0032 0E94 0000 		call gpio_cfg_opc_np
  73               	.LVL1:
  53:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   
  54:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_IN(BUTTON);
  74               		.loc 2 54 3 view .LVU19
  75 0036 61E0      		ldi r22,lo8(1)
  76 0038 80E4      		ldi r24,lo8(64)
  77 003a 96E0      		ldi r25,lo8(6)
  78 003c 0E94 0000 		call gpio_cfg_in_np
  79               	.LVL2:
  55:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_OPC(BUTTON, GPIO_OPC_PULLUP);
  80               		.loc 2 55 3 view .LVU20
  81 0040 48E1      		ldi r20,lo8(24)
  82 0042 61E0      		ldi r22,lo8(1)
  83 0044 80E4      		ldi r24,lo8(64)
  84 0046 96E0      		ldi r25,lo8(6)
  85 0048 0E94 0000 		call gpio_cfg_opc_np
  86               	.LVL3:
  56:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_ISC(BUTTON, GPIO_ISC_FALLING);
  87               		.loc 2 56 3 view .LVU21
  88 004c 42E0      		ldi r20,lo8(2)
  89 004e 61E0      		ldi r22,lo8(1)
  90 0050 80E4      		ldi r24,lo8(64)
  91 0052 96E0      		ldi r25,lo8(6)
  92 0054 0E94 0000 		call gpio_cfg_isc_np
  93               	.LVL4:
  57:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  58:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  59:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  60:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //* GPIO/External Interrupt                                             *
  61:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  62:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // External interrupt 0 on PC1, enable pullup, sence falling edge
  63:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   PORTC.PIN0CTRL = PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
  94               		.loc 2 63 3 view .LVU22
  95               		.loc 2 63 18 is_stmt 0 view .LVU23
  96 0058 81E1      		ldi r24,lo8(17)
  97 005a 8093 5006 		sts 1616,r24
  64:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   PORTC.INT0MASK = (1 << BUTTON_PIN);
  98               		.loc 2 64 3 is_stmt 1 view .LVU24
  99               		.loc 2 64 18 is_stmt 0 view .LVU25
 100 005e 82E0      		ldi r24,lo8(2)
 101 0060 8093 4A06 		sts 1610,r24
  65:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   PORTC.INTCTRL = PORT_INT0LVL_MED_gc;
 102               		.loc 2 65 3 is_stmt 1 view .LVU26
 103               		.loc 2 65 17 is_stmt 0 view .LVU27
 104 0064 8093 4906 		sts 1609,r24
  66:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  67:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  68:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  69:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //* Interrupt levels.                                                   *
  70:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  71:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //Enables High, Medium and Low Level Interrupts
  72:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
 105               		.loc 2 72 3 is_stmt 1 view .LVU28
 106               		.loc 2 72 13 is_stmt 0 view .LVU29
 107 0068 8091 A200 		lds r24,162
 108 006c 8760      		ori r24,lo8(7)
 109 006e 8093 A200 		sts 162,r24
 110               	.LBE19:
 111               	.LBE18:
  18:Src/core/main.c ****   sei();
 112               		.loc 1 18 3 is_stmt 1 view .LVU30
 113               	/* #APP */
 114               	 ;  18 "Src/core/main.c" 1
 115 0072 7894      		sei
 116               	 ;  0 "" 2
 117               	/* #NOAPP */
 118               	.LBB20:
 119               	.LBB21:
 120               	.LBB22:
 121               	.LBB23:
 122               		.file 3 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h"
   1:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
   5:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
   8:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  11:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  16:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  20:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  32:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2453 2014-10-19 08:18:11Z saaadhu $ */
  33:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  34:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  37:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  39:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #endif
  43:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  44:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     \code
  47:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  50:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  58:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  65:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  67:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** */
  68:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  69:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  71:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     register.
  76:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  77:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** */
  80:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** void
  81:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** {
  83:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 	);
  89:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** }
  90:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  91:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  93:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  99:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****  */
 102:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** void
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** {
 105:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 	__asm__ volatile (
 123               		.loc 3 105 2 is_stmt 0 view .LVU31
 124 0074 20E4      		ldi r18,lo8(64)
 125 0076 3FE1      		ldi r19,lo8(31)
 126               	.L3:
 127               	.LBE23:
 128               	.LBE22:
 129               	.LBE21:
 130               	.LBE20:
  19:Src/core/main.c **** 
  20:Src/core/main.c ****   while (1)
 131               		.loc 1 20 3 is_stmt 1 discriminator 1 view .LVU32
  21:Src/core/main.c ****   {
  22:Src/core/main.c ****     /* NO INTERRUPTS MODE*/
  23:Src/core/main.c ****     /*read_end_stops();*/
  24:Src/core/main.c **** 
  25:Src/core/main.c ****     _delay_ms(1);
 132               		.loc 1 25 5 discriminator 1 view .LVU33
 133               	.LVL5:
 134               	.LBB27:
 135               	.LBI20:
 136               		.file 4 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 137               		.loc 4 166 1 discriminator 1 view .LVU34
 138               	.LBB26:
 167:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	double __tmp ;
 139               		.loc 4 168 2 discriminator 1 view .LVU35
 169:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 140               		.loc 4 190 2 discriminator 1 view .LVU36
 191:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 141               		.loc 4 191 2 discriminator 1 view .LVU37
 192:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 142               		.loc 4 192 2 discriminator 1 view .LVU38
 193:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 143               		.loc 4 194 7 discriminator 1 view .LVU39
 195:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 144               		.loc 4 207 3 discriminator 1 view .LVU40
 208:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 145               		.loc 4 208 2 discriminator 1 view .LVU41
 146               	.LBB25:
 147               	.LBI22:
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** {
 148               		.loc 3 103 1 discriminator 1 view .LVU42
 149               	.LBB24:
 150               		.loc 3 105 2 discriminator 1 view .LVU43
 151 0078 C901      		movw r24,r18
 152               	/* #APP */
 153               	 ;  105 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h" 1
 154 007a 0197      		1: sbiw r24,1
 155 007c 01F4      		brne 1b
 156               	 ;  0 "" 2
 157               	.LVL6:
 158               		.loc 3 105 2 is_stmt 0 discriminator 1 view .LVU44
 159               	/* #NOAPP */
 160 007e 00C0      		rjmp .L3
 161               	.LBE24:
 162               	.LBE25:
 163               	.LBE26:
 164               	.LBE27:
 165               		.cfi_endproc
 166               	.LFE18:
 168               		.text
 169               	.Letext0:
 170               		.file 5 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stdint-gcc.h"
 171               		.file 6 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/avr/iox32a4u.h"
 172               		.file 7 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stddef.h"
 173               		.file 8 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdio.h"
 174               		.file 9 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h"
 175               		.file 10 "Src/core/../../Inc/core/../../Inc/core/../driver/io.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:4      *ABS*:000000000000003f __SREG__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:5      *ABS*:0000000000000034 __CCP__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccCPuNek.s:14     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
gpio_cfg_out_np
gpio_cfg_opc_np
gpio_cfg_in_np
gpio_cfg_isc_np
