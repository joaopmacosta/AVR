   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.rodata.str1.1,"aMS",@progbits,1
  12               	.LC0:
  13 0000 5354 4152 		.string	"START\n"
  13      540A 00
  14               	.LC1:
  15 0007 636D 643A 		.string	"cmd: %d, %d, %d\n"
  15      2025 642C 
  15      2025 642C 
  15      2025 640A 
  15      00
  16               		.section	.text.startup,"ax",@progbits
  17               	.global	main
  19               	main:
  20               	.LFB18:
  21               		.file 1 "Src/core/main.c"
   1:Src/core/main.c **** //***************************************************************************
   2:Src/core/main.c **** // Copyright (C) 2017 Laboratório de Sistemas e Tecnologia Subaquática      *
   3:Src/core/main.c **** // Departamento de Engenharia Electrotécnica e de Computadores              *
   4:Src/core/main.c **** // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
   5:Src/core/main.c **** //***************************************************************************
   6:Src/core/main.c **** // Author: João Costa                                                       *
   7:Src/core/main.c **** //***************************************************************************
   8:Src/core/main.c **** 
   9:Src/core/main.c **** #include "../../Inc/core/main.h"
  10:Src/core/main.c **** 
  11:Src/core/main.c **** 
  12:Src/core/main.c **** int main(void)
  13:Src/core/main.c **** {
  22               		.loc 1 13 1 view -0
  23               		.cfi_startproc
  24               	/* prologue: function */
  25               	/* frame size = 0 */
  26               	/* stack size = 0 */
  27               	.L__stack_usage = 0
  14:Src/core/main.c **** 
  15:Src/core/main.c ****   cli();
  28               		.loc 1 15 3 view .LVU1
  29               	/* #APP */
  30               	 ;  15 "Src/core/main.c" 1
  31 0000 F894      		cli
  32               	 ;  0 "" 2
  16:Src/core/main.c ****   board_init();
  33               		.loc 1 16 3 view .LVU2
  34               	/* #NOAPP */
  35               	.LBB18:
  36               	.LBI18:
  37               		.file 2 "Src/core/../../Inc/core/../../Inc/core/board_init.h"
   1:Src/core/../../Inc/core/../../Inc/core/board_init.h **** //***************************************************************************
   2:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Copyright (C) 2017 Laboratório de Sistemas e Tecnologia Subaquática      *
   3:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Departamento de Engenharia Electrotécnica e de Computadores              *
   4:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
   5:Src/core/../../Inc/core/../../Inc/core/board_init.h **** //***************************************************************************
   6:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Author: Pedro Gonçalves                                                  *
   7:Src/core/../../Inc/core/../../Inc/core/board_init.h **** //***************************************************************************
   8:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
   9:Src/core/../../Inc/core/../../Inc/core/board_init.h **** /// ISO C 99 headers.
  10:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <stddef.h>
  11:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <inttypes.h>
  12:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <stdio.h>
  13:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <stdlib.h>
  14:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <string.h>
  15:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  16:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // Local Headers
  17:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../../config.h"
  18:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../driver/io.h"
  19:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../../Inc/driver/uart.h"
  20:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include "../../TC_driver/TC_driver.h"
  21:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  22:Src/core/../../Inc/core/../../Inc/core/board_init.h **** // AVR headers.
  23:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #include <avr/io.h>
  24:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  25:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #ifndef BOARD_INIT_H_INCLUDED_
  26:Src/core/../../Inc/core/../../Inc/core/board_init.h **** #define BOARD_INIT_H_INCLUDED_
  27:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  28:Src/core/../../Inc/core/../../Inc/core/board_init.h **** static inline void
  29:Src/core/../../Inc/core/../../Inc/core/board_init.h **** board_init(void)
  38               		.loc 2 29 1 view .LVU3
  39               	.LBB19:
  30:Src/core/../../Inc/core/../../Inc/core/board_init.h **** {
  31:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  32:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // System Clock.                                                        *
  33:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  34:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // ENABLE INTERNAL 32MHZ OSCILLATOR
  35:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  36:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   CCP = CCP_IOREG_gc;
  40               		.loc 2 36 3 view .LVU4
  41               		.loc 2 36 7 is_stmt 0 view .LVU5
  42 0002 88ED      		ldi r24,lo8(-40)
  43 0004 84BF      		out __CCP__,r24
  37:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  38:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   OSC.CTRL = OSC_RC32MEN_bm;
  44               		.loc 2 38 3 is_stmt 1 view .LVU6
  45               		.loc 2 38 12 is_stmt 0 view .LVU7
  46 0006 82E0      		ldi r24,lo8(2)
  47 0008 8093 5000 		sts 80,r24
  39:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  40:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   while (!(OSC.STATUS & OSC_RC32MRDY_bm))
  48               		.loc 2 40 3 is_stmt 1 view .LVU8
  49               	.L2:
  41:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  50               		.loc 2 41 5 view .LVU9
  40:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  51               		.loc 2 40 9 view .LVU10
  40:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  52               		.loc 2 40 15 is_stmt 0 view .LVU11
  53 000c 8091 5100 		lds r24,81
  40:Src/core/../../Inc/core/../../Inc/core/board_init.h ****     ;
  54               		.loc 2 40 9 view .LVU12
  55 0010 81FF      		sbrs r24,1
  56 0012 00C0      		rjmp .L2
  42:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  43:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   CCP = CCP_IOREG_gc;
  57               		.loc 2 43 3 is_stmt 1 view .LVU13
  58               		.loc 2 43 7 is_stmt 0 view .LVU14
  59 0014 88ED      		ldi r24,lo8(-40)
  60 0016 84BF      		out __CCP__,r24
  44:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  45:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
  61               		.loc 2 45 3 is_stmt 1 view .LVU15
  62               		.loc 2 45 12 is_stmt 0 view .LVU16
  63 0018 81E0      		ldi r24,lo8(1)
  64 001a 8093 4000 		sts 64,r24
  46:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  47:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  48:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //* GPIO.                                                               *
  49:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  50:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  51:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   // Setup pins as IN/OUTputs
  52:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_OUT(LED, false);
  65               		.loc 2 52 3 is_stmt 1 view .LVU17
  66 001e 40E0      		ldi r20,0
  67 0020 60E0      		ldi r22,0
  68 0022 80E4      		ldi r24,lo8(64)
  69 0024 96E0      		ldi r25,lo8(6)
  70 0026 0E94 0000 		call gpio_cfg_out_np
  53:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  54:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_OUT(UART0_TX, false);
  71               		.loc 2 54 3 view .LVU18
  72 002a 40E0      		ldi r20,0
  73 002c 63E0      		ldi r22,lo8(3)
  74 002e 80E4      		ldi r24,lo8(64)
  75 0030 96E0      		ldi r25,lo8(6)
  76 0032 0E94 0000 		call gpio_cfg_out_np
  55:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   GPIO_CFG_IN(UART0_RX);
  77               		.loc 2 55 3 view .LVU19
  78 0036 62E0      		ldi r22,lo8(2)
  79 0038 80E4      		ldi r24,lo8(64)
  80 003a 96E0      		ldi r25,lo8(6)
  81 003c 0E94 0000 		call gpio_cfg_in_np
  56:Src/core/../../Inc/core/../../Inc/core/board_init.h **** 
  57:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  58:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //* Interrupt levels.                                                   *
  59:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //***********************************************************************
  60:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   //Enables High, Medium and Low Level Interrupts
  61:Src/core/../../Inc/core/../../Inc/core/board_init.h ****   PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
  82               		.loc 2 61 3 view .LVU20
  83               		.loc 2 61 13 is_stmt 0 view .LVU21
  84 0040 8091 A200 		lds r24,162
  85 0044 8760      		ori r24,lo8(7)
  86 0046 8093 A200 		sts 162,r24
  87               	.LBE19:
  88               	.LBE18:
  17:Src/core/main.c ****   initUsart();
  89               		.loc 1 17 3 is_stmt 1 view .LVU22
  90 004a 0E94 0000 		call initUsart
  18:Src/core/main.c ****   sei();
  91               		.loc 1 18 3 view .LVU23
  92               	/* #APP */
  93               	 ;  18 "Src/core/main.c" 1
  94 004e 7894      		sei
  95               	 ;  0 "" 2
  19:Src/core/main.c **** 
  20:Src/core/main.c ****   spew("START\n");
  96               		.loc 1 20 3 view .LVU24
  97               	/* #NOAPP */
  98 0050 80E0      		ldi r24,lo8(.LC0)
  99 0052 90E0      		ldi r25,hi8(.LC0)
 100 0054 9F93      		push r25
 101               		.cfi_def_cfa_offset 3
 102 0056 8F93      		push r24
 103               		.cfi_def_cfa_offset 4
 104 0058 0E94 0000 		call spew
  21:Src/core/main.c ****   spew("cmd: %d, %d, %d\n", _cpuData.arg1, _cpuData.arg2, _cpuData.arg3);
 105               		.loc 1 21 3 view .LVU25
 106 005c 8091 0000 		lds r24,_cpuData+5
 107 0060 8F93      		push r24
 108               		.cfi_def_cfa_offset 5
 109 0062 8091 0000 		lds r24,_cpuData+4
 110 0066 8F93      		push r24
 111               		.cfi_def_cfa_offset 6
 112 0068 8091 0000 		lds r24,_cpuData+3
 113 006c 8F93      		push r24
 114               		.cfi_def_cfa_offset 7
 115 006e 8091 0000 		lds r24,_cpuData+2
 116 0072 8F93      		push r24
 117               		.cfi_def_cfa_offset 8
 118 0074 8091 0000 		lds r24,_cpuData+1
 119 0078 8F93      		push r24
 120               		.cfi_def_cfa_offset 9
 121 007a 8091 0000 		lds r24,_cpuData
 122 007e 8F93      		push r24
 123               		.cfi_def_cfa_offset 10
 124 0080 80E0      		ldi r24,lo8(.LC1)
 125 0082 90E0      		ldi r25,hi8(.LC1)
 126 0084 9F93      		push r25
 127               		.cfi_def_cfa_offset 11
 128 0086 8F93      		push r24
 129               		.cfi_def_cfa_offset 12
 130 0088 0E94 0000 		call spew
 131 008c 8DB7      		in r24,__SP_L__
 132 008e 9EB7      		in r25,__SP_H__
 133 0090 0A96      		adiw r24,10
 134 0092 8DBF      		out __SP_L__,r24
 135 0094 9EBF      		out __SP_H__,r25
 136               		.cfi_def_cfa_offset 2
 137               	.LBB20:
 138               	.LBB21:
 139               	.LBB22:
 140               	.LBB23:
 141               		.file 3 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h"
   1:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
   5:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
   8:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  11:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  16:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  20:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  32:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2453 2014-10-19 08:18:11Z saaadhu $ */
  33:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  34:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  37:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  39:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** #endif
  43:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  44:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     \code
  47:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  50:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  58:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  65:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  67:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** */
  68:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  69:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  71:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     register.
  76:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  77:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** */
  80:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** void
  81:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** {
  83:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 	);
  89:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** }
  90:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  91:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  93:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 
  99:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h ****  */
 102:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** void
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** {
 105:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** 	__asm__ volatile (
 142               		.loc 3 105 2 is_stmt 0 view .LVU26
 143 0096 00E2      		ldi r16,lo8(32)
 144 0098 13E0      		ldi r17,lo8(3)
 145               	.LBE23:
 146               	.LBE22:
 147               	.LBE21:
 148               	.LBE20:
  22:Src/core/main.c ****   while (1)
  23:Src/core/main.c ****   {
  24:Src/core/main.c ****     _delay_ms(1000);
  25:Src/core/main.c **** 
  26:Src/core/main.c ****     if (check_new_command())
  27:Src/core/main.c ****     {
  28:Src/core/main.c ****       parse_cpu_data_rx(get_cpu_cmd());
  29:Src/core/main.c ****       spew("cmd: %d, %d, %d\n", _cpuData.arg1, _cpuData.arg2, _cpuData.arg3);
 149               		.loc 1 29 7 view .LVU27
 150 009a C0E0      		ldi r28,lo8(.LC1)
 151 009c D0E0      		ldi r29,hi8(.LC1)
 152               	.L4:
  22:Src/core/main.c ****   while (1)
 153               		.loc 1 22 3 is_stmt 1 view .LVU28
  24:Src/core/main.c **** 
 154               		.loc 1 24 5 view .LVU29
 155               	.LBB28:
 156               	.LBI20:
 157               		.file 4 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 158               		.loc 4 166 1 view .LVU30
 159               	.LBB26:
 167:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	double __tmp ;
 160               		.loc 4 168 2 view .LVU31
 169:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 161               		.loc 4 190 2 view .LVU32
 191:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 162               		.loc 4 191 2 view .LVU33
 192:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 163               		.loc 4 192 2 view .LVU34
 193:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 164               		.loc 4 194 7 view .LVU35
 195:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		while(__ticks)
 165               		.loc 4 198 8 view .LVU36
 166               	.LBE26:
 167               	.LBE28:
  13:Src/core/main.c **** 
 168               		.loc 1 13 1 is_stmt 0 view .LVU37
 169 009e 80E1      		ldi r24,lo8(16)
 170 00a0 97E2      		ldi r25,lo8(39)
 171               	.L3:
 172               	.LBB29:
 173               	.LBB27:
 199:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 174               		.loc 4 201 4 is_stmt 1 view .LVU38
 175               	.LBB25:
 176               	.LBI22:
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h **** {
 177               		.loc 3 103 1 view .LVU39
 178               	.LBB24:
 179               		.loc 3 105 2 view .LVU40
 180 00a2 F801      		movw r30,r16
 181               	/* #APP */
 182               	 ;  105 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay_basic.h" 1
 183 00a4 3197      		1: sbiw r30,1
 184 00a6 01F4      		brne 1b
 185               	 ;  0 "" 2
 186               	/* #NOAPP */
 187               	.LBE24:
 188               	.LBE25:
 202:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 			__ticks --;
 189               		.loc 4 202 4 view .LVU41
 198:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		{
 190               		.loc 4 198 8 view .LVU42
 191 00a8 0197      		sbiw r24,1
 192 00aa 01F4      		brne .L3
 193               	.LBE27:
 194               	.LBE29:
  26:Src/core/main.c ****     {
 195               		.loc 1 26 5 view .LVU43
  26:Src/core/main.c ****     {
 196               		.loc 1 26 9 is_stmt 0 view .LVU44
 197 00ac 0E94 0000 		call check_new_command
  26:Src/core/main.c ****     {
 198               		.loc 1 26 8 view .LVU45
 199 00b0 8823      		tst r24
 200 00b2 01F0      		breq .L4
  28:Src/core/main.c ****       spew("cmd: %d, %d, %d\n", _cpuData.arg1, _cpuData.arg2, _cpuData.arg3);
 201               		.loc 1 28 7 is_stmt 1 view .LVU46
 202 00b4 0E94 0000 		call get_cpu_cmd
 203 00b8 0E94 0000 		call parse_cpu_data_rx
 204               		.loc 1 29 7 view .LVU47
 205 00bc 8091 0000 		lds r24,_cpuData+5
 206 00c0 8F93      		push r24
 207               		.cfi_def_cfa_offset 3
 208 00c2 8091 0000 		lds r24,_cpuData+4
 209 00c6 8F93      		push r24
 210               		.cfi_def_cfa_offset 4
 211 00c8 8091 0000 		lds r24,_cpuData+3
 212 00cc 8F93      		push r24
 213               		.cfi_def_cfa_offset 5
 214 00ce 8091 0000 		lds r24,_cpuData+2
 215 00d2 8F93      		push r24
 216               		.cfi_def_cfa_offset 6
 217 00d4 8091 0000 		lds r24,_cpuData+1
 218 00d8 8F93      		push r24
 219               		.cfi_def_cfa_offset 7
 220 00da 8091 0000 		lds r24,_cpuData
 221 00de 8F93      		push r24
 222               		.cfi_def_cfa_offset 8
 223 00e0 DF93      		push r29
 224               		.cfi_def_cfa_offset 9
 225 00e2 CF93      		push r28
 226               		.cfi_def_cfa_offset 10
 227 00e4 0E94 0000 		call spew
  30:Src/core/main.c ****       new_command_read();
 228               		.loc 1 30 7 view .LVU48
 229 00e8 0E94 0000 		call new_command_read
 230 00ec 8DB7      		in r24,__SP_L__
 231 00ee 9EB7      		in r25,__SP_H__
 232 00f0 0896      		adiw r24,8
 233 00f2 8DBF      		out __SP_L__,r24
 234 00f4 9EBF      		out __SP_H__,r25
 235               		.cfi_def_cfa_offset 2
 236 00f6 00C0      		rjmp .L4
 237               		.cfi_endproc
 238               	.LFE18:
 240               		.comm	_cpuData,6,1
 241               		.text
 242               	.Letext0:
 243               		.file 5 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stdint-gcc.h"
 244               		.file 6 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/avr/iox32a4u.h"
 245               		.file 7 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stddef.h"
 246               		.file 8 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdio.h"
 247               		.file 9 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h"
 248               		.file 10 "Src/core/../../Inc/core/../../Inc/driver/cpu_parser.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:4      *ABS*:000000000000003f __SREG__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:5      *ABS*:0000000000000034 __CCP__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//cctJfJn8.s:19     .text.startup:0000000000000000 main
                            *COM*:0000000000000006 _cpuData

UNDEFINED SYMBOLS
gpio_cfg_out_np
gpio_cfg_in_np
initUsart
spew
check_new_command
get_cpu_cmd
parse_cpu_data_rx
new_command_read
__do_copy_data
__do_clear_bss
