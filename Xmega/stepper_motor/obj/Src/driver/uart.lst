   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	initUsart
  13               	initUsart:
  14               	.LFB12:
  15               		.file 1 "Src/driver/uart.c"
   1:Src/driver/uart.c **** //***************************************************************************
   2:Src/driver/uart.c **** // Copyright (C) 2017 Laboratório de Sistemas e Tecnologia Subaquática      *
   3:Src/driver/uart.c **** // Departamento de Engenharia Electrotécnica e de Computadores              *
   4:Src/driver/uart.c **** // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
   5:Src/driver/uart.c **** //***************************************************************************
   6:Src/driver/uart.c **** // Author: Pedro Gonçalves                                                  *
   7:Src/driver/uart.c **** //***************************************************************************
   8:Src/driver/uart.c **** 
   9:Src/driver/uart.c **** #include <stdlib.h>
  10:Src/driver/uart.c **** #include <avr/io.h>
  11:Src/driver/uart.c **** #include <avr/interrupt.h>
  12:Src/driver/uart.c **** #include <util/delay.h>
  13:Src/driver/uart.c **** #include <avr/pgmspace.h>
  14:Src/driver/uart.c **** #include <stdbool.h>
  15:Src/driver/uart.c **** 
  16:Src/driver/uart.c **** #include "../../Inc/driver/uart.h"
  17:Src/driver/uart.c **** //#include "../../Inc/driver/io.h"
  18:Src/driver/uart.c **** //#include "../../Inc/driver/cpu_parser.h"
  19:Src/driver/uart.c **** #include "../../config.h"
  20:Src/driver/uart.c **** 
  21:Src/driver/uart.c **** //#include "../motor_parser.h"
  22:Src/driver/uart.c **** //#include "../cpu_parser.h"
  23:Src/driver/uart.c **** 
  24:Src/driver/uart.c **** int cnt_reset_stop_emerg = 0;
  25:Src/driver/uart.c **** char *text_emerg = "$S,0*";
  26:Src/driver/uart.c **** 
  27:Src/driver/uart.c **** void initUsart(void)
  28:Src/driver/uart.c **** {
  16               		.loc 1 28 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  29:Src/driver/uart.c ****   //DEBUG
  30:Src/driver/uart.c ****   USARTC0_BAUDCTRLB = UART0_BAUDCTRLB;
  22               		.loc 1 30 3 view .LVU1
  23               		.loc 1 30 21 is_stmt 0 view .LVU2
  24 0000 1092 A708 		sts 2215,__zero_reg__
  31:Src/driver/uart.c ****   USARTC0_BAUDCTRLA = UART0_BAUDCTRLA;
  25               		.loc 1 31 3 is_stmt 1 view .LVU3
  26               		.loc 1 31 21 is_stmt 0 view .LVU4
  27 0004 82E2      		ldi r24,lo8(34)
  28 0006 8093 A608 		sts 2214,r24
  32:Src/driver/uart.c ****   USARTC0_CTRLA = UART0_CTRLA;
  29               		.loc 1 32 3 is_stmt 1 view .LVU5
  30               		.loc 1 32 17 is_stmt 0 view .LVU6
  31 000a 80E3      		ldi r24,lo8(48)
  32 000c 8093 A308 		sts 2211,r24
  33:Src/driver/uart.c ****   USARTC0_CTRLB = UART0_CTRLB;
  33               		.loc 1 33 3 is_stmt 1 view .LVU7
  34               		.loc 1 33 17 is_stmt 0 view .LVU8
  35 0010 88E1      		ldi r24,lo8(24)
  36 0012 8093 A408 		sts 2212,r24
  34:Src/driver/uart.c ****   USARTC0_CTRLC = UART0_CTRLC;
  37               		.loc 1 34 3 is_stmt 1 view .LVU9
  38               		.loc 1 34 17 is_stmt 0 view .LVU10
  39 0016 83E0      		ldi r24,lo8(3)
  40 0018 8093 A508 		sts 2213,r24
  41               	/* epilogue start */
  35:Src/driver/uart.c **** }
  42               		.loc 1 35 1 view .LVU11
  43 001c 0895      		ret
  44               		.cfi_endproc
  45               	.LFE12:
  47               	.global	UART_sendChar
  49               	UART_sendChar:
  50               	.LVL0:
  51               	.LFB13:
  36:Src/driver/uart.c **** 
  37:Src/driver/uart.c **** void UART_sendChar(uint8_t usart, uint8_t data)
  38:Src/driver/uart.c **** {
  52               		.loc 1 38 1 is_stmt 1 view -0
  53               		.cfi_startproc
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  39:Src/driver/uart.c ****   switch (usart)
  58               		.loc 1 39 3 view .LVU13
  59 001e 8111      		cpse r24,__zero_reg__
  60 0020 00C0      		rjmp .L2
  61               	.LVL1:
  62               	.L4:
  63               	.LBB12:
  64               	.LBB13:
  40:Src/driver/uart.c ****   {
  41:Src/driver/uart.c ****   case DEBUG:
  42:Src/driver/uart.c ****     while (!(USARTC0_STATUS & USART_DREIF_bm))
  43:Src/driver/uart.c ****       ;
  65               		.loc 1 43 7 view .LVU14
  42:Src/driver/uart.c ****       ;
  66               		.loc 1 42 11 view .LVU15
  42:Src/driver/uart.c ****       ;
  67               		.loc 1 42 14 is_stmt 0 view .LVU16
  68 0022 8091 A108 		lds r24,2209
  42:Src/driver/uart.c ****       ;
  69               		.loc 1 42 11 view .LVU17
  70 0026 85FF      		sbrs r24,5
  71 0028 00C0      		rjmp .L4
  44:Src/driver/uart.c ****     USARTC0_DATA = data;
  72               		.loc 1 44 5 is_stmt 1 view .LVU18
  73               		.loc 1 44 18 is_stmt 0 view .LVU19
  74 002a 6093 A008 		sts 2208,r22
  45:Src/driver/uart.c ****     break;
  75               		.loc 1 45 5 is_stmt 1 view .LVU20
  76               	.L2:
  77               	/* epilogue start */
  78               		.loc 1 45 5 is_stmt 0 view .LVU21
  79               	.LBE13:
  80               	.LBE12:
  46:Src/driver/uart.c **** 
  47:Src/driver/uart.c ****   default:
  48:Src/driver/uart.c ****     break;
  49:Src/driver/uart.c ****   }
  50:Src/driver/uart.c **** }
  81               		.loc 1 50 1 view .LVU22
  82 002e 0895      		ret
  83               		.cfi_endproc
  84               	.LFE13:
  86               	.global	UART_sendString
  88               	UART_sendString:
  89               	.LVL2:
  90               	.LFB14:
  51:Src/driver/uart.c **** 
  52:Src/driver/uart.c **** void UART_sendString(uint8_t usart, char *str)
  53:Src/driver/uart.c **** {
  91               		.loc 1 53 1 is_stmt 1 view -0
  92               		.cfi_startproc
  93               		.loc 1 53 1 is_stmt 0 view .LVU24
  94 0030 1F93      		push r17
  95               		.cfi_def_cfa_offset 3
  96               		.cfi_offset 17, -2
  97 0032 CF93      		push r28
  98               		.cfi_def_cfa_offset 4
  99               		.cfi_offset 28, -3
 100 0034 DF93      		push r29
 101               		.cfi_def_cfa_offset 5
 102               		.cfi_offset 29, -4
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 3 */
 106               	.L__stack_usage = 3
 107 0036 182F      		mov r17,r24
  54:Src/driver/uart.c ****   register char c;
 108               		.loc 1 54 3 is_stmt 1 view .LVU25
  55:Src/driver/uart.c ****   while ((c = *str++))
 109               		.loc 1 55 3 view .LVU26
 110               	.LVL3:
 111               	.L8:
 112               		.loc 1 55 9 view .LVU27
 113               		.loc 1 55 19 is_stmt 0 view .LVU28
 114 0038 EB01      		movw r28,r22
 115               	.LVL4:
 116               		.loc 1 55 13 view .LVU29
 117 003a 6991      		ld r22,Y+
 118               	.LVL5:
 119               		.loc 1 55 9 view .LVU30
 120 003c 6111      		cpse r22,__zero_reg__
 121 003e 00C0      		rjmp .L9
 122               	/* epilogue start */
  56:Src/driver/uart.c ****     UART_sendChar(usart, c);
  57:Src/driver/uart.c **** }
 123               		.loc 1 57 1 view .LVU31
 124 0040 DF91      		pop r29
 125 0042 CF91      		pop r28
 126               	.LVL6:
 127               		.loc 1 57 1 view .LVU32
 128 0044 1F91      		pop r17
 129               	.LVL7:
 130               		.loc 1 57 1 view .LVU33
 131 0046 0895      		ret
 132               	.LVL8:
 133               	.L9:
  56:Src/driver/uart.c ****     UART_sendChar(usart, c);
 134               		.loc 1 56 5 is_stmt 1 view .LVU34
 135 0048 812F      		mov r24,r17
 136 004a 0E94 0000 		call UART_sendChar
 137               	.LVL9:
  55:Src/driver/uart.c ****   while ((c = *str++))
 138               		.loc 1 55 19 is_stmt 0 view .LVU35
 139 004e BE01      		movw r22,r28
 140 0050 00C0      		rjmp .L8
 141               		.cfi_endproc
 142               	.LFE14:
 144               	.global	UART_sendInt
 146               	UART_sendInt:
 147               	.LVL10:
 148               	.LFB15:
  58:Src/driver/uart.c **** 
  59:Src/driver/uart.c **** void UART_sendInt(uint8_t usart, int value)
  60:Src/driver/uart.c **** {
 149               		.loc 1 60 1 is_stmt 1 view -0
 150               		.cfi_startproc
 151               		.loc 1 60 1 is_stmt 0 view .LVU37
 152 0052 1F93      		push r17
 153               		.cfi_def_cfa_offset 3
 154               		.cfi_offset 17, -2
 155 0054 CF93      		push r28
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 28, -3
 158 0056 DF93      		push r29
 159               		.cfi_def_cfa_offset 5
 160               		.cfi_offset 29, -4
 161 0058 CDB7      		in r28,__SP_L__
 162 005a DEB7      		in r29,__SP_H__
 163               		.cfi_def_cfa_register 28
 164 005c 6197      		sbiw r28,17
 165               		.cfi_def_cfa_offset 22
 166 005e CDBF      		out __SP_L__,r28
 167 0060 DEBF      		out __SP_H__,r29
 168               	/* prologue: function */
 169               	/* frame size = 17 */
 170               	/* stack size = 20 */
 171               	.L__stack_usage = 20
 172 0062 182F      		mov r17,r24
 173 0064 CB01      		movw r24,r22
 174               	.LVL11:
  61:Src/driver/uart.c ****   char string[17];
 175               		.loc 1 61 3 is_stmt 1 view .LVU38
  62:Src/driver/uart.c ****   UART_sendString(usart, itoa(value, string, 10)); // base 10
 176               		.loc 1 62 3 view .LVU39
 177               	.LBB14:
 178               	.LBI14:
 179               		.file 2 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h"
   1:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Copyright (c) 2004,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
   4:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Portions of documentation Copyright (c) 1990, 1991, 1993, 1994
   5:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The Regents of the University of California.
   6:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
   7:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    All rights reserved.
   8:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
   9:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Redistribution and use in source and binary forms, with or without
  10:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    modification, are permitted provided that the following conditions are met:
  11:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  12:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    * Redistributions of source code must retain the above copyright
  13:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      notice, this list of conditions and the following disclaimer.
  14:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  15:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    * Redistributions in binary form must reproduce the above copyright
  16:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      notice, this list of conditions and the following disclaimer in
  17:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      the documentation and/or other materials provided with the
  18:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      distribution.
  19:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  20:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    * Neither the name of the copyright holders nor the names of
  21:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      contributors may be used to endorse or promote products derived
  22:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      from this software without specific prior written permission.
  23:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  24:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  28:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   POSSIBILITY OF SUCH DAMAGE.
  35:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  36:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****   $Id: stdlib.h 2503 2016-02-07 22:59:47Z joerg_wunsch $
  37:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
  38:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  39:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef _STDLIB_H_
  40:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define	_STDLIB_H_ 1
  41:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  42:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __ASSEMBLER__
  43:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  44:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
  45:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define __need_NULL
  46:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define __need_size_t
  47:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define __need_wchar_t
  48:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #include <stddef.h>
  49:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  50:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __ptr_t
  51:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define __ptr_t void *
  52:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
  53:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif	/* !__DOXYGEN__ */
  54:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  55:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifdef __cplusplus
  56:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern "C" {
  57:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
  58:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  59:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** \file */
  60:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  61:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** \defgroup avr_stdlib <stdlib.h>: General utilities
  62:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     \code #include <stdlib.h> \endcode
  63:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  64:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     This file declares some basic C macros and functions as
  65:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     defined by the ISO standard, plus some AVR-specific extensions.
  66:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
  67:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  68:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /*@{*/
  69:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** Result type for function div(). */
  70:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** typedef struct {
  71:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	int quot;                   /**< The Quotient. */
  72:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	int rem;                    /**< The Remainder. */
  73:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** } div_t;
  74:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  75:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** Result type for function ldiv(). */
  76:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** typedef struct {
  77:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	long quot;                  /**< The Quotient. */
  78:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	long rem;                   /**< The Remainder. */
  79:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** } ldiv_t;
  80:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  81:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** Comparision function type for qsort(), just for convenience. */
  82:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** typedef int (*__compar_fn_t)(const void *, const void *);
  83:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  84:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
  85:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  86:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __ATTR_CONST__
  87:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # define __ATTR_CONST__ __attribute__((__const__))
  88:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
  89:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  90:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __ATTR_MALLOC__
  91:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # define __ATTR_MALLOC__ __attribute__((__malloc__))
  92:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
  93:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  94:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __ATTR_NORETURN__
  95:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # define __ATTR_NORETURN__ __attribute__((__noreturn__))
  96:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
  97:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
  98:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __ATTR_PURE__
  99:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # define __ATTR_PURE__ __attribute__((__pure__))
 100:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
 101:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 102:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef	__ATTR_GNU_INLINE__
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # ifdef  __GNUC_STDC_INLINE__
 104:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #  define __ATTR_GNU_INLINE__   __attribute__((__gnu_inline__))
 105:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # else
 106:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #  define __ATTR_GNU_INLINE__
 107:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** # endif
 108:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
 109:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 110:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
 111:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 112:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** The abort() function causes abnormal program termination to occur.
 113:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     This realization disables interrupts and jumps to _exit() function
 114:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     with argument equal to 1. In the limited AVR environment, execution is
 115:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     effectively halted by entering an infinite loop. */
 116:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void abort(void) __ATTR_NORETURN__;
 117:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 118:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** The abs() function computes the absolute value of the integer \c i.
 119:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 120:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 121:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern int abs(int __i) __ATTR_CONST__;
 122:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
 123:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define	abs(__i) __builtin_abs(__i)
 124:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
 125:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 126:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** The labs() function computes the absolute value of the long integer
 127:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     \c i.
 128:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 129:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 130:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern long labs(long __i) __ATTR_CONST__;
 131:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifndef __DOXYGEN__
 132:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define labs(__i) __builtin_labs(__i)
 133:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
 134:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 135:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 136:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The bsearch() function searches an array of \c nmemb objects, the
 137:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      initial member of which is pointed to by \c base, for a member
 138:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      that matches the object pointed to by \c key.  The size of each
 139:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      member of the array is specified by \c size.
 140:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 141:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The contents of the array should be in ascending sorted order
 142:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      according to the comparison function referenced by \c compar.
 143:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The \c compar routine is expected to have two arguments which
 144:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      point to the key object and to an array member, in that order,
 145:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      and should return an integer less than, equal to, or greater than
 146:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      zero if the key object is found, respectively, to be less than,
 147:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      to match, or be greater than the array member.
 148:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 149:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The bsearch() function returns a pointer to a matching member of
 150:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      the array, or a null pointer if no match is found.  If two
 151:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      members compare as equal, which member is matched is unspecified.
 152:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 153:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
 154:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 		     size_t __size, int (*__compar)(const void *, const void *));
 155:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 156:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /* __divmodhi4 and __divmodsi4 from libgcc.a */
 157:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 158:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The div() function computes the value \c num/denom and returns
 159:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      the quotient and remainder in a structure named \c div_t that
 160:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      contains two int members named \c quot and \c rem.
 161:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 162:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __ATTR_CONST__;
 163:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 164:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The ldiv() function computes the value \c num/denom and returns
 165:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      the quotient and remainder in a structure named \c ldiv_t that
 166:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      contains two long integer members named \c quot and \c rem.
 167:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 168:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __ATTR_CONST__;
 169:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 170:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 171:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The qsort() function is a modified partition-exchange sort, or
 172:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      quicksort.
 173:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 174:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The qsort() function sorts an array of \c nmemb objects, the
 175:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      initial member of which is pointed to by \c base.  The size of
 176:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      each object is specified by \c size.  The contents of the array
 177:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      base are sorted in ascending order according to a comparison
 178:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      function pointed to by \c compar, which requires two arguments
 179:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      pointing to the objects being compared.
 180:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 181:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The comparison function must return an integer less than, equal
 182:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      to, or greater than zero if the first argument is considered to
 183:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      be respectively less than, equal to, or greater than the second.
 184:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 185:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void qsort(void *__base, size_t __nmemb, size_t __size,
 186:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 		  __compar_fn_t __compar);
 187:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 188:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 189:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The strtol() function converts the string in \c nptr to a long
 190:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     value.  The conversion is done according to the given base, which
 191:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     must be between 2 and 36 inclusive, or be the special value 0.
 192:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 193:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 194:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 195:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 196:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 197:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 198:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 199:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 200:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The remainder of the string is converted to a long value in the
 201:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     obvious manner, stopping at the first character which is not a
 202:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     valid digit in the given base.  (In bases above 10, the letter \c 'A'
 203:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     in either upper or lower case represents 10, \c 'B' represents 11,
 204:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     and so forth, with \c 'Z' representing 35.)
 205:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 206:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     If \c endptr is not NULL, strtol() stores the address of the first
 207:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 208:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     however, strtol() stores the original value of \c nptr in \c
 209:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 210:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     on return, the entire string was valid.)
 211:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 212:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The strtol() function returns the result of the conversion, unless
 213:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     the value would underflow or overflow.  If no conversion could be
 214:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     performed, 0 is returned.  If an overflow or underflow occurs, \c
 215:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     errno is set to \ref avr_errno "ERANGE" and the function return value
 216:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     is clamped to \c LONG_MIN or \c LONG_MAX, respectively.
 217:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 218:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern long strtol(const char *__nptr, char **__endptr, int __base);
 219:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 220:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 221:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The strtoul() function converts the string in \c nptr to an
 222:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     unsigned long value.  The conversion is done according to the
 223:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     given base, which must be between 2 and 36 inclusive, or be the
 224:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     special value 0.
 225:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 226:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 227:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 228:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 229:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 230:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 231:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 232:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 233:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The remainder of the string is converted to an unsigned long value
 234:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     in the obvious manner, stopping at the first character which is
 235:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     not a valid digit in the given base.  (In bases above 10, the
 236:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     letter \c 'A' in either upper or lower case represents 10, \c 'B'
 237:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     represents 11, and so forth, with \c 'Z' representing 35.)
 238:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 239:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     If \c endptr is not NULL, strtoul() stores the address of the first
 240:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 241:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     however, strtoul() stores the original value of \c nptr in \c
 242:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 243:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     on return, the entire string was valid.)
 244:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 245:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The strtoul() function return either the result of the conversion
 246:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     or, if there was a leading minus sign, the negation of the result
 247:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     of the conversion, unless the original (non-negated) value would
 248:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     overflow; in the latter case, strtoul() returns ULONG_MAX, and \c
 249:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     errno is set to \ref avr_errno "ERANGE".  If no conversion could 
 250:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     be performed, 0 is returned.
 251:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 252:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
 253:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 254:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 255:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The atol() function converts the initial portion of the string
 256:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     pointed to by \p s to long integer representation. In contrast to
 257:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 258:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****         \code strtol(s, (char **)NULL, 10); \endcode
 259:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 260:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 261:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 262:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     stack) and works more quickly.
 263:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 264:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern long atol(const char *__s) __ATTR_PURE__;
 265:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 266:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 267:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     The atoi() function converts the initial portion of the string
 268:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     pointed to by \p s to integer representation. In contrast to
 269:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 270:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****         \code (int)strtol(s, (char **)NULL, 10); \endcode
 271:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 272:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 273:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 274:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     stack) and works more quickly.
 275:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 276:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern int atoi(const char *__s) __ATTR_PURE__;
 277:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 278:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 279:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The exit() function terminates the application.  Since there is no
 280:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    environment to return to, \c status is ignored, and code execution
 281:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    will eventually reach an infinite loop, thereby effectively halting
 282:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    all code processing.  Before entering the infinite loop, interrupts
 283:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    are globally disabled.
 284:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 285:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    In a C++ context, global destructors will be called before halting
 286:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    execution.
 287:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 288:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void exit(int __status) __ATTR_NORETURN__;
 289:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 290:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 291:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The malloc() function allocates \c size bytes of memory.
 292:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    If malloc() fails, a NULL pointer is returned.
 293:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 294:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Note that malloc() does \e not initialize the returned memory to
 295:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    zero bytes.
 296:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 297:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    See the chapter about \ref malloc "malloc() usage" for implementation
 298:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    details.
 299:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 300:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void *malloc(size_t __size) __ATTR_MALLOC__;
 301:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 302:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 303:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The free() function causes the allocated memory referenced by \c
 304:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    ptr to be made available for future allocations.  If \c ptr is
 305:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    NULL, no action occurs.
 306:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 307:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void free(void *__ptr);
 308:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 309:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 310:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 311:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 312:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern size_t __malloc_margin;
 313:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 314:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 315:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 316:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 317:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern char *__malloc_heap_start;
 318:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 319:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 320:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 321:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 322:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern char *__malloc_heap_end;
 323:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 324:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 325:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Allocate \c nele elements of \c size each.  Identical to calling
 326:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \c malloc() using <tt>nele * size</tt> as argument, except the
 327:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    allocated memory will be cleared to zero.
 328:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 329:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void *calloc(size_t __nele, size_t __size) __ATTR_MALLOC__;
 330:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 331:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 332:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The realloc() function tries to change the size of the region
 333:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    allocated at \c ptr to the new \c size value.  It returns a
 334:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    pointer to the new region.  The returned pointer might be the
 335:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    same as the old pointer, or a pointer to a completely different
 336:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    region.
 337:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 338:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The contents of the returned region up to either the old or the new
 339:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    size value (whatever is less) will be identical to the contents of
 340:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    the old region, even in case a new region had to be allocated.
 341:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 342:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    It is acceptable to pass \c ptr as NULL, in which case realloc()
 343:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    will behave identical to malloc().
 344:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 345:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    If the new memory cannot be allocated, realloc() returns NULL, and
 346:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    the region at \c ptr will not be changed.
 347:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 348:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void *realloc(void *__ptr, size_t __size) __ATTR_MALLOC__;
 349:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 350:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern double strtod(const char *__nptr, char **__endptr);
 351:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 352:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern double atof(const char *__nptr);
 353:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 354:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** Highest number that can be generated by rand(). */
 355:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #define	RAND_MAX 0x7FFF
 356:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 357:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 358:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The rand() function computes a sequence of pseudo-random integers in the
 359:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      range of 0 to \c RAND_MAX (as defined by the header file <stdlib.h>).
 360:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 361:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      The srand() function sets its argument \c seed as the seed for a new
 362:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      sequence of pseudo-random numbers to be returned by rand().  These
 363:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      sequences are repeatable by calling srand() with the same seed value.
 364:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 365:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      If no seed value is provided, the functions are automatically seeded with
 366:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      a value of 1.
 367:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 368:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      In compliance with the C standard, these functions operate on
 369:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      \c int arguments.  Since the underlying algorithm already uses
 370:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      32-bit calculations, this causes a loss of precision.  See
 371:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      \c random() for an alternate set of functions that retains full
 372:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****      32-bit precision.
 373:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 374:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern int rand(void);
 375:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 376:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Pseudo-random number generator seeding; see rand().
 377:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 378:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern void srand(unsigned int __seed);
 379:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 380:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 381:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Variant of rand() that stores the context in the user-supplied
 382:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    variable located at \c ctx instead of a static library variable
 383:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    so the function becomes re-entrant.
 384:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 385:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern int rand_r(unsigned long *__ctx);
 386:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /*@}*/
 387:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 388:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /*@{*/
 389:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /** \name Non-standard (i.e. non-ISO C) functions.
 390:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****  \ingroup avr_stdlib
 391:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 392:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 393:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \brief Convert an integer to a string.
 394:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 395:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The function itoa() converts the integer value from \c val into an
 396:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    ASCII representation that will be stored under \c s.  The caller
 397:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    is responsible for providing sufficient storage in \c s.
 398:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 399:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \note The minimal size of the buffer \c s depends on the choice of
 400:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    radix. For example, if the radix is 2 (binary), you need to supply a buffer
 401:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    with a minimal length of 8 * sizeof (int) + 1 characters, i.e. one
 402:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    character for each bit plus one for the string terminator. Using a larger
 403:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    radix will require a smaller minimal buffer size.
 404:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 405:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \warning If the buffer is too small, you risk a buffer overflow.
 406:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 407:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Conversion is done using the \c radix as base, which may be a
 408:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    number between 2 (binary conversion) and up to 36.  If \c radix
 409:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    is greater than 10, the next digit after \c '9' will be the letter
 410:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \c 'a'.
 411:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     
 412:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     If radix is 10 and val is negative, a minus sign will be prepended.
 413:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 414:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The itoa() function returns the pointer passed as \c s.
 415:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 416:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifdef  __DOXYGEN__
 417:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern char *itoa(int val, char *s, int radix);
 418:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #else
 419:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern __inline__ __ATTR_GNU_INLINE__
 420:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** char *itoa (int __val, char *__s, int __radix)
 180               		.loc 2 420 7 view .LVU40
 181               	.LBE14:
 421:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** {
 422:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     if (!__builtin_constant_p (__radix)) {
 182               		.loc 2 422 5 view .LVU41
 423:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	extern char *__itoa (int, char *, int);
 424:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	return __itoa (__val, __s, __radix);
 425:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     } else if (__radix < 2 || __radix > 36) {
 183               		.loc 2 425 12 view .LVU42
 184               	.LBB16:
 185               	.LBB15:
 426:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	*__s = 0;
 427:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	return __s;
 428:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     } else {
 429:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	extern char *__itoa_ncheck (int, char *, unsigned char);
 186               		.loc 2 429 2 view .LVU43
 430:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	return __itoa_ncheck (__val, __s, __radix);
 187               		.loc 2 430 2 view .LVU44
 188               		.loc 2 430 9 is_stmt 0 view .LVU45
 189 0066 4AE0      		ldi r20,lo8(10)
 190 0068 BE01      		movw r22,r28
 191               	.LVL12:
 192               		.loc 2 430 9 view .LVU46
 193 006a 6F5F      		subi r22,-1
 194 006c 7F4F      		sbci r23,-1
 195 006e 0E94 0000 		call __itoa_ncheck
 196               	.LVL13:
 197               		.loc 2 430 9 view .LVU47
 198 0072 BC01      		movw r22,r24
 199               	.LVL14:
 200               		.loc 2 430 9 view .LVU48
 201               	.LBE15:
 202               	.LBE16:
 203               		.loc 1 62 3 view .LVU49
 204 0074 812F      		mov r24,r17
 205 0076 0E94 0000 		call UART_sendString
 206               	.LVL15:
 207               	/* epilogue start */
  63:Src/driver/uart.c **** }
 208               		.loc 1 63 1 view .LVU50
 209 007a 6196      		adiw r28,17
 210 007c CDBF      		out __SP_L__,r28
 211 007e DEBF      		out __SP_H__,r29
 212 0080 DF91      		pop r29
 213 0082 CF91      		pop r28
 214 0084 1F91      		pop r17
 215               	.LVL16:
 216               		.loc 1 63 1 view .LVU51
 217 0086 0895      		ret
 218               		.cfi_endproc
 219               	.LFE15:
 221               	.global	UART_sendLint
 223               	UART_sendLint:
 224               	.LVL17:
 225               	.LFB16:
  64:Src/driver/uart.c **** 
  65:Src/driver/uart.c **** void UART_sendLint(uint8_t usart, long int data)
  66:Src/driver/uart.c **** {
 226               		.loc 1 66 1 is_stmt 1 view -0
 227               		.cfi_startproc
 228               		.loc 1 66 1 is_stmt 0 view .LVU53
 229 0088 1F93      		push r17
 230               		.cfi_def_cfa_offset 3
 231               		.cfi_offset 17, -2
 232 008a CF93      		push r28
 233               		.cfi_def_cfa_offset 4
 234               		.cfi_offset 28, -3
 235 008c DF93      		push r29
 236               		.cfi_def_cfa_offset 5
 237               		.cfi_offset 29, -4
 238 008e CDB7      		in r28,__SP_L__
 239 0090 DEB7      		in r29,__SP_H__
 240               		.cfi_def_cfa_register 28
 241 0092 A197      		sbiw r28,33
 242               		.cfi_def_cfa_offset 38
 243 0094 CDBF      		out __SP_L__,r28
 244 0096 DEBF      		out __SP_H__,r29
 245               	/* prologue: function */
 246               	/* frame size = 33 */
 247               	/* stack size = 36 */
 248               	.L__stack_usage = 36
 249 0098 182F      		mov r17,r24
 250 009a CB01      		movw r24,r22
 251               	.LVL18:
 252               		.loc 1 66 1 view .LVU54
 253 009c BA01      		movw r22,r20
  67:Src/driver/uart.c ****   char buf[33];
 254               		.loc 1 67 3 is_stmt 1 view .LVU55
  68:Src/driver/uart.c ****   UART_sendString(usart, ltoa(data, buf, 10));
 255               		.loc 1 68 3 view .LVU56
 256               	.LVL19:
 257               	.LBB17:
 258               	.LBI17:
 431:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     }
 432:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** }
 433:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #endif
 434:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 435:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** /**
 436:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****  \ingroup avr_stdlib
 437:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****  
 438:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \brief Convert a long integer to a string.
 439:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 440:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The function ltoa() converts the long integer value from \c val into an
 441:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    ASCII representation that will be stored under \c s.  The caller
 442:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    is responsible for providing sufficient storage in \c s.
 443:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 444:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \note The minimal size of the buffer \c s depends on the choice of
 445:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    radix. For example, if the radix is 2 (binary), you need to supply a buffer
 446:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    with a minimal length of 8 * sizeof (long int) + 1 characters, i.e. one
 447:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    character for each bit plus one for the string terminator. Using a larger
 448:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    radix will require a smaller minimal buffer size.
 449:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 450:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \warning If the buffer is too small, you risk a buffer overflow.
 451:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 452:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    Conversion is done using the \c radix as base, which may be a
 453:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    number between 2 (binary conversion) and up to 36.  If \c radix
 454:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    is greater than 10, the next digit after \c '9' will be the letter
 455:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    \c 'a'.
 456:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 457:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    If radix is 10 and val is negative, a minus sign will be prepended.
 458:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 
 459:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****    The ltoa() function returns the pointer passed as \c s.
 460:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** */
 461:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #ifdef  __DOXYGEN__
 462:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern char *ltoa(long val, char *s, int radix);
 463:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** #else
 464:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** extern __inline__ __ATTR_GNU_INLINE__
 465:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** char *ltoa (long __val, char *__s, int __radix)
 259               		.loc 2 465 7 view .LVU57
 260               	.LBE17:
 466:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** {
 467:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     if (!__builtin_constant_p (__radix)) {
 261               		.loc 2 467 5 view .LVU58
 468:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	extern char *__ltoa (long, char *, int);
 469:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	return __ltoa (__val, __s, __radix);
 470:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     } else if (__radix < 2 || __radix > 36) {
 262               		.loc 2 470 12 view .LVU59
 263               	.LBB19:
 264               	.LBB18:
 471:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	*__s = 0;
 472:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	return __s;
 473:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h ****     } else {
 474:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	extern char *__ltoa_ncheck (long, char *, unsigned char);
 265               		.loc 2 474 2 view .LVU60
 475:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h **** 	return __ltoa_ncheck (__val, __s, __radix);
 266               		.loc 2 475 2 view .LVU61
 267               		.loc 2 475 9 is_stmt 0 view .LVU62
 268 009e 2AE0      		ldi r18,lo8(10)
 269 00a0 AE01      		movw r20,r28
 270               	.LVL20:
 271               		.loc 2 475 9 view .LVU63
 272 00a2 4F5F      		subi r20,-1
 273 00a4 5F4F      		sbci r21,-1
 274 00a6 0E94 0000 		call __ltoa_ncheck
 275               	.LVL21:
 276               		.loc 2 475 9 view .LVU64
 277 00aa BC01      		movw r22,r24
 278               	.LVL22:
 279               		.loc 2 475 9 view .LVU65
 280               	.LBE18:
 281               	.LBE19:
 282               		.loc 1 68 3 view .LVU66
 283 00ac 812F      		mov r24,r17
 284 00ae 0E94 0000 		call UART_sendString
 285               	.LVL23:
 286               	/* epilogue start */
  69:Src/driver/uart.c **** }
 287               		.loc 1 69 1 view .LVU67
 288 00b2 A196      		adiw r28,33
 289 00b4 CDBF      		out __SP_L__,r28
 290 00b6 DEBF      		out __SP_H__,r29
 291 00b8 DF91      		pop r29
 292 00ba CF91      		pop r28
 293 00bc 1F91      		pop r17
 294               	.LVL24:
 295               		.loc 1 69 1 view .LVU68
 296 00be 0895      		ret
 297               		.cfi_endproc
 298               	.LFE16:
 300               	.global	__vector_25
 302               	__vector_25:
 303               	.LFB17:
  70:Src/driver/uart.c **** 
  71:Src/driver/uart.c **** //DEBUG
  72:Src/driver/uart.c **** ISR(DEBUG_RX_IVEC)
  73:Src/driver/uart.c **** {
 304               		.loc 1 73 1 is_stmt 1 view -0
 305               		.cfi_startproc
 306 00c0 1F92 1FB6 		__gcc_isr 1
 306      1F92 1124 
 307               	/* prologue: Signal */
 308               	/* frame size = 0 */
 309               	/* stack size = 0...3 */
 310               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  74:Src/driver/uart.c ****   //cpu_parser(USARTC0_DATA);
  75:Src/driver/uart.c ****   cnt_reset_stop_emerg = 0;
 311               		.loc 1 75 3 view .LVU70
 312               		.loc 1 75 24 is_stmt 0 view .LVU71
 313 00c8 1092 0000 		sts cnt_reset_stop_emerg,__zero_reg__
 314 00cc 1092 0000 		sts cnt_reset_stop_emerg+1,__zero_reg__
 315               	/* epilogue start */
  76:Src/driver/uart.c **** }
 316               		.loc 1 76 1 view .LVU72
 317 00d0 1F90 1FBE 		__gcc_isr 2
 317      1F90 
 318 00d6 1895      		reti
 319               		__gcc_isr 0,r0
 320               		.cfi_endproc
 321               	.LFE17:
 323               	.global	spew
 325               	spew:
 326               	.LVL25:
 327               	.LFB18:
  77:Src/driver/uart.c **** 
  78:Src/driver/uart.c **** char debug_bfr[256];
  79:Src/driver/uart.c **** 
  80:Src/driver/uart.c **** void spew(const char *fmt, ...)
  81:Src/driver/uart.c **** {
 328               		.loc 1 81 1 is_stmt 1 view -0
 329               		.cfi_startproc
 330               		.loc 1 81 1 is_stmt 0 view .LVU74
 331 00d8 CF93      		push r28
 332               		.cfi_def_cfa_offset 3
 333               		.cfi_offset 28, -2
 334 00da DF93      		push r29
 335               		.cfi_def_cfa_offset 4
 336               		.cfi_offset 29, -3
 337 00dc CDB7      		in r28,__SP_L__
 338 00de DEB7      		in r29,__SP_H__
 339               		.cfi_def_cfa_register 28
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 2 */
 343               	.L__stack_usage = 2
 344 00e0 FE01      		movw r30,r28
 345 00e2 3596      		adiw r30,5
 346 00e4 6191      		ld r22,Z+
 347 00e6 7191      		ld r23,Z+
  82:Src/driver/uart.c ****   va_list args;
 348               		.loc 1 82 3 is_stmt 1 view .LVU75
  83:Src/driver/uart.c ****   va_start(args, fmt);
 349               		.loc 1 83 3 view .LVU76
 350               	.LVL26:
  84:Src/driver/uart.c **** 
  85:Src/driver/uart.c ****   vsprintf(debug_bfr, fmt, args);
 351               		.loc 1 85 3 view .LVU77
 352 00e8 AF01      		movw r20,r30
 353 00ea 80E0      		ldi r24,lo8(debug_bfr)
 354 00ec 90E0      		ldi r25,hi8(debug_bfr)
 355 00ee 0E94 0000 		call vsprintf
 356               	.LVL27:
  86:Src/driver/uart.c ****   va_end(args);
 357               		.loc 1 86 3 view .LVU78
  87:Src/driver/uart.c **** 
  88:Src/driver/uart.c ****   UART_sendString(DEBUG, debug_bfr);
 358               		.loc 1 88 3 view .LVU79
 359 00f2 60E0      		ldi r22,lo8(debug_bfr)
 360 00f4 70E0      		ldi r23,hi8(debug_bfr)
 361 00f6 80E0      		ldi r24,0
 362 00f8 0E94 0000 		call UART_sendString
 363               	.LVL28:
 364               	/* epilogue start */
  89:Src/driver/uart.c ****   /* HAL_Delay(2); */
  90:Src/driver/uart.c **** }
 365               		.loc 1 90 1 is_stmt 0 view .LVU80
 366 00fc DF91      		pop r29
 367 00fe CF91      		pop r28
 368 0100 0895      		ret
 369               		.cfi_endproc
 370               	.LFE18:
 372               		.comm	debug_bfr,256,1
 373               	.global	text_emerg
 374               		.section	.rodata.str1.1,"aMS",@progbits,1
 375               	.LC0:
 376 0000 2453 2C30 		.string	"$S,0*"
 376      2A00 
 377               		.data
 380               	text_emerg:
 381 0000 0000      		.word	.LC0
 382               	.global	cnt_reset_stop_emerg
 383               		.section .bss
 386               	cnt_reset_stop_emerg:
 387 0000 0000      		.zero	2
 388               		.text
 389               	.Letext0:
 390               		.file 3 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stddef.h"
 391               		.file 4 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stdint-gcc.h"
 392               		.file 5 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/avr/iox32a4u.h"
 393               		.file 6 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stdarg.h"
 394               		.file 7 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdio.h"
 395               		.file 8 "Src/driver/../../Inc/driver/uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:4      *ABS*:000000000000003f __SREG__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:5      *ABS*:0000000000000034 __CCP__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:13     .text:0000000000000000 initUsart
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:49     .text:000000000000001e UART_sendChar
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:88     .text:0000000000000030 UART_sendString
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:146    .text:0000000000000052 UART_sendInt
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:223    .text:0000000000000088 UART_sendLint
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:302    .text:00000000000000c0 __vector_25
                            *ABS*:0000000000000002 __gcc_isr.n_pushed.001
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:386    .bss:0000000000000000 cnt_reset_stop_emerg
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:325    .text:00000000000000d8 spew
                            *COM*:0000000000000100 debug_bfr
/var/folders/yp/mmqk4_hx5c99vq73lkt1gzd00000gn/T//ccPiTWws.s:380    .data:0000000000000000 text_emerg

UNDEFINED SYMBOLS
__itoa_ncheck
__ltoa_ncheck
vsprintf
__do_copy_data
__do_clear_bss
